# Enhanced Project Documentation Automation

## Core Documentation Maintenance

After every significant code change, you MUST update the relevant documentation:

### Architecture Changes

When modifying system structure, components, or data flow:

1. Update `docs/architecture.md` with current state
2. Add/update Mermaid diagrams if data flow changed
3. Log architectural decisions in `docs/decisions.md`
4. Note any important discoveries in `MEMORY.md`

### Feature Development

When working on tasks:

1. Update progress in `docs/todo.md`
2. Move completed items to the "Recently Completed" section
3. Update `docs/backlog.md` if scope or priorities change
4. Document any technical decisions made

### Bug Fixes & Issues

When resolving problems:

1. Log the issue and solution in `MEMORY.md`
2. Update task status in `docs/todo.md`
3. Update architecture docs if the fix reveals structural changes

### Regular Maintenance

Periodically (when todo.md gets cluttered):

1. Archive old completed items from `docs/todo.md`
2. Move future ideas from todo to `docs/backlog.md`
3. Reprioritize based on what you've learned

## Documentation Standards

### Architecture Documentation

-   Document CURRENT state, not intended state
-   Include working code examples and patterns
-   Generate Mermaid diagrams for complex data flows
-   Reference specific files and functions when relevant

### Task Management

-   Include sufficient context for future AI assistance
-   Reference specific files, functions, and error messages
-   Update status and completion dates accurately
-   Note blockers and dependencies clearly
-   Keep focus on immediate work, move future ideas to backlog

### Memory Entries

-   Focus on significant decisions and learnings
-   Include actionable insights, not just descriptions
-   Keep entries concise but informative
-   Archive old entries when file gets too long

### Decision Records

-   Capture context that led to the decision
-   Document alternatives that were considered
-   Include implementation implications
-   Set review dates for revisiting decisions

## Cross-Referencing Rules

-   Always check existing documentation before adding new content
-   Link related decisions, tasks, and architecture changes
-   Update multiple files when changes affect multiple areas
-   Maintain consistency between memory, architecture, and task tracking

Remember: These documents should provide comprehensive context for future development and AI assistance, evolving as living documentation that stays current with your codebase.
